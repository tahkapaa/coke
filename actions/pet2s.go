package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
	"github.com/tahkapaa/coke/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Pet2)
// DB Table: Plural (pet2s)
// Resource: Plural (Pet2s)
// Path: Plural (/pet2s)
// View Template Folder: Plural (/templates/pet2s/)

// Pet2sResource is the resource for the Pet2 model
type Pet2sResource struct {
	buffalo.Resource
}

// List gets all Pet2s. This function is mapped to the path
// GET /pet2s
func (v Pet2sResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	pet2s := &models.Pet2s{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Pet2s from the DB
	if err := q.All(pet2s); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, pet2s))
}

// Show gets the data for one Pet2. This function is mapped to
// the path GET /pet2s/{pet2_id}
func (v Pet2sResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Pet2
	pet2 := &models.Pet2{}

	// To find the Pet2 the parameter pet2_id is used.
	if err := tx.Find(pet2, c.Param("pet2_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, pet2))
}

// New renders the form for creating a new Pet2.
// This function is mapped to the path GET /pet2s/new
func (v Pet2sResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Pet2{}))
}

// Create adds a Pet2 to the DB. This function is mapped to the
// path POST /pet2s
func (v Pet2sResource) Create(c buffalo.Context) error {
	// Allocate an empty Pet2
	pet2 := &models.Pet2{}

	// Bind pet2 to the html form elements
	if err := c.Bind(pet2); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(pet2)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, pet2))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Pet2 was created successfully")

	// and redirect to the pet2s index page
	return c.Render(201, r.Auto(c, pet2))
}

// Edit renders a edit form for a Pet2. This function is
// mapped to the path GET /pet2s/{pet2_id}/edit
func (v Pet2sResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Pet2
	pet2 := &models.Pet2{}

	if err := tx.Find(pet2, c.Param("pet2_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, pet2))
}

// Update changes a Pet2 in the DB. This function is mapped to
// the path PUT /pet2s/{pet2_id}
func (v Pet2sResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Pet2
	pet2 := &models.Pet2{}

	if err := tx.Find(pet2, c.Param("pet2_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Pet2 to the html form elements
	if err := c.Bind(pet2); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(pet2)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, pet2))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Pet2 was updated successfully")

	// and redirect to the pet2s index page
	return c.Render(200, r.Auto(c, pet2))
}

// Destroy deletes a Pet2 from the DB. This function is mapped
// to the path DELETE /pet2s/{pet2_id}
func (v Pet2sResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Pet2
	pet2 := &models.Pet2{}

	// To find the Pet2 the parameter pet2_id is used.
	if err := tx.Find(pet2, c.Param("pet2_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(pet2); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Pet2 was destroyed successfully")

	// Redirect to the pet2s index page
	return c.Render(200, r.Auto(c, pet2))
}
